Задача: написать программу на Python, которая делает следующие действия:
1. Создает 50 zip-архивов, в каждом 100 xml файлов со случайными данными следующей структуры:
<root>
    <var name=’id’ value=’<случайное уникальное строковое значение>’/>
    <var name=’level’ value=’<случайное число от 1 до 100>’/>
    <objects>
        <object name=’<случайное строковое значение>’/>
        <object name=’<случайное строковое значение>’/>
        …
    </objects>
</root>
В тэге objects случайное число (от 1 до 10) вложенных тэгов object.
2. Обрабатывает директорию с полученными zip архивами, разбирает вложенные xml файлы и формирует 2 csv файла:
Первый: id, level - по одной строке на каждый xml файл
Второй: id, object_name - по отдельной строке для каждого тэга object (получится от 1 до 10 строк на каждый xml файл)
Очень желательно сделать так, чтобы задание 2 эффективно использовало ресурсы многоядерного процессора. Также желательно чтобы программа работала быстро.


Решение на Python3 (самое интересное и выводы в конце):

В репозитории 4 варианта решения.
Во всех уникальные id генерируются с помощью модуля uuid.
1) task_ver1.py -- создание и парсинг .xml происходит средствами стандартной библиотеки (без средств модуля xml). Создание архивов разбивается на процессы (imap_unordered), для получения списка полученных из .xml данных испльзуется map. Запись полученных результатов в файлы csv1.csv и csv2.csv проиходит один раз в двух процессах (нет Lock).

2) task_ver2.py -- аналог task_ver1.py, только создание и паргсинг .xml происходит средствами модулей xml.etree.cElementTree и xml.dom.

3) task_ver3.py -- аналог task_ver1.py, только полученные данные записываются n раз (n - число архивов), стал необходим Lock, map заменян на imap_unordered. Неверно отрабатывает на ОС Windows. 

4) task_ver4.py -- аналог task_ver3.py для Windows. Классы заменяны на функции. Использовал Manager чтобы передать Lock в процессы.


Скрипты созданы для Python3. Тестировал в Linux Debian 8 (python 3.4.2) и Window 10 (python 3.5.4).
Среднее время на выполнение задача1/задача2 за 10 экспериментов на i5-4440, 3,10GHz + SSD:
скрипт          Linux Debian 8      Window 10
task_ver1.py    0.30с / 0.21c       0.55c/0.50c
task_ver2.py    0.67c / 0.30c       1.10c/0.60c
task_ver3.py    0.25c / 0.10c       	---
task_ver4.py    0.30c / 0.20c       0.55c/0.30c
  

Если все данные находятся на локальной машине, то task_ver3.py - наиболее эффективный скрипт для решения поставленной задачи, однако он проигрвыает task_ver2.py (использует xml модуль) в удобстве дальнейшего обслуживания.
Если доступ к данным будет не столь быстрым (удаленные ресурсы,...) то task_ver1.py наиболее эффективный скрипт для решения поставленной задачи, который также проигрвыает task_ver2.py (использует xml модуль) в удобстве дальнейшего обслуживания.
С учетом дальнейшего облуживания файла наиболее удобен task_ver2.py
